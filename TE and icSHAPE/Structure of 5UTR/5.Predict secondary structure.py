
importCommon()
import SARS2

shape = General.load_shape("/Share/home/zhangqf8/sunlei/data/SARS2/20200529-SARS2-huh7/SARS2-huh7/Processing/13.map_virus_splice/only_cover_splice/final.shape")
fasta = General.load_fasta("/Share/home/zhangqf8/sunlei/data/SARS2/20200529-SARS2-huh7/SARS2-huh7/Processing/splice_fasta/splice_sequence.fa")

# OUT = open(join(HOME, "figs/Fold.ps1"), 'w')
# for key in shape.keys():
#     subshape = shape[key][:300]
#     subseq = fasta[key][:300]
#     dot = Structure.predict_structure(subseq, subshape, si=-0.4, sm=1.5, md=300)
#     cmd = Visual.Plot_RNAStructure_Shape(subseq, dot, subshape, mode='label', title=key)
#     print(cmd, file=OUT)

# OUT.close()

###########
#  预测二级结构
###########

structures = {}
for key in shape.keys():
    subshape = shape[key][:300]
    subseq = fasta[key][:300]
    prob, pfs = Structure.partition(subseq, shape_list=subshape, si=-0.4, sm=1.5, md=300, verbose=False, return_pfs=True)
    dot = Structure.maxExpect(input_pfs_file=pfs, delete_pfs=True)[0]
    #bpprob = SARS2.collect_bpprob(prob, dot)
    structures[key] = dot

structures = {
    '63_21549': '......(((((.(((((....)))))..)))))....((((((.(((((.....)))))........((((((((...))))))))..(((((...(((((((((...........)))).)).)))...))))...)........................................((((.....)))).....))))))..(((.((((.((((........)))).)))).)))................((........(((((((((.((.......))...))))))))).))', 
    '64_26467': '......(((((.(((((....)))))..)))))...........(((((.....))))).(((((..(((((((((((........)))))))....))))))))).(((((((...(((((..((....((((((((....))))))))..((((((...))))))....(.....((((((((....))))))))....).))..)))))..........(((((...((((((.((....)).))))))..))))).......))))))).......((((((.....))))))...', 
    '64_28254': '......(((((.(((((....)))))..)))))...........(((((.....)))))....((((..................((((((....((.((((((.....(((.(((((.....))))).))))))).)).)).))))))....((((......))))...)))).((((((((((((.((((.........)))))))))..((.....))......)))))))..........((((.((.(((........((((....))))..........)))))...))))...', 
    '65_21551': '......(((((.(((((....)))))..)))))...........(((((.....))))).(((((..((((((((...))))))))...((((...(((((((((...........)))).)).)))...))))..))))).....................................((((.....))))((((........)))).((((.((((........)))).))))..............................(((((((((.((.......))...)))))))))...', 
    '65_25380': '......(((((.(((((....)))))..)))))...........(((((.....))))).((((((((((((((........)))))))))).))))...................((((((...))))))......(((((......)))))..(((((((...(((((..(((((((...((((((.(((((....(((.....))).)))))..))))))))))))).......(((.....))))))))...)))))))..............((((..((.....))..))))..', 
    '65_27883': '......(((((.(((((....)))))..)))))...........(((((.....))))).((((.((((..(((((.((....)).)))))..)))))))).......(((((((((((((((......))))))))).))))))...(....)..(((((((........)))))))....((((....(((.((((((((((((........))))))))))))...))).....))))......((((..(((((.((((((.((.(((((...)))))))))))))))))))))).', 
    '66_27384': '......(((((.(((((....)))))..)))))...........(((((.....)))))(((((.......)))))...............((((((...((((((..(((((.....)))))..))))))...))))))((((.((((((((((....))))))))))..(((..((((((((.((.....)).)))))))))))........(((........))).........)))).(((..((...((((.......))))...))..))).....(((((.....)))))...', 
    '68_28262': '......(((((.(((((....)))))..))))).(((((.....(((((.....)))))...((((((.............((((((....((.((((((.....(((.(((((.....))))).))))))).)).)).))))))....((((......))))..))))))((((((((((((.((((.........)))))))))..((.....))......))))))).))))).....(((............)))..((((..((((....(((.....))).))))..))))...', 
    '69_26236': '......(((((.(((((....)))))..)))))...........(((((.....)))))........(((((((....((....))))))))).((((((((..(((((((((........))))))))))))))))).......(((((((....(((((((...)))))).)....))))))).....((((((.(((...))))))))).......(((.((((..(((((((......)))))))...)))).))).......(((.(((((((...)))))))..))).......', 
    '69_27040': '......(((((.(((((....)))))..)))))...........(((((.....))))).(((((((((.((((.((((((............))))))))))....(((((((((..(((....))))))))))))...((((((((.(((.(((...((.............)).))).))).)))))...))).......(((((((.((((...((((..(((((((((...))))).))))))))....).)))...))))))).............))).))))))........'
}



def manual_period(seqLen, splice_site, splice_site_pos, period=20, peroid_color='#FF0000'):
    splice_site_pos += 1
    j = 0
    annotation_cmd = ""
    for i in range(1, splice_site+1):
        j += 1
        if i%period == 0:
            annotation_cmd += f"{i}:type=B,anchor={j},size=8,color={peroid_color};"
    for i in range(splice_site_pos, splice_site_pos+seqLen-splice_site):
        j += 1
        if i==splice_site_pos or i%period == 0:
            annotation_cmd += f"{i}:type=B,anchor={j},size=8,color={peroid_color};"
    
    return f"-period 0 -annotations \"{annotation_cmd}\""

OUT = open(join(HOME, "figs/MaxExpect.ps1"), 'w')
for key in shape.keys():
    subshape = shape[key][:300]
    subseq = fasta[key][:300]
    prob = Structure.partition(subseq, shape_list=subshape, si=-0.4, sm=1.5, md=300, verbose=False, return_pfs=False)
    bpprob = SARS2.collect_bpprob(prob, structures[key])
    cmd = Visual.Plot_RNAStructure_Shape(subseq, structures[key], subshape, mode='label', period=0, title=key, bpprob=bpprob, bpprob_mode='both', bpwarning=False)
    splice_site, splice_site_pos = key.split('_')
    splice_site, splice_site_pos = int(splice_site), int(splice_site_pos)
    cmd += " " + manual_period(len(subseq), splice_site, splice_site_pos, period=20, peroid_color=Colors.RGB['pink'])
    print(cmd, file=OUT)

OUT.close()

